import esbuild from "esbuild"
import process from "process"
import esbuildSvelte from "esbuild-svelte"
import fs from 'node:fs'
import tailwindcss from "@tailwindcss/postcss"
import { sveltePreprocess } from "svelte-preprocess"

const jsBanner = `/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
If you want to view the source, please visit the github repository of this plugin
*/
`
const cssBanner = `/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
It's the combined output of all the CSS used in Svelte components.
*/
`

const prod = process.argv[2] === "production"

const commonOptions = {
	plugins: [
		esbuildSvelte({
			compilerOptions: { css: "external", dev: !prod, modernAst: true},
			preprocess: sveltePreprocess({
				postcss: {
					plugins: [
						tailwindcss,
					],
				}
			}),
		}),
	],
	banner: {
		js: jsBanner,
		css: cssBanner,
	},
	conditions: ["svelte"], // because of svelte-markdown
	entryPoints: ["src/main.ts"],
	bundle: true,
	external: [
		"node:http",
		"node:https",
		"node:stream",
		"node:path",
		"obsidian",
		"electron",
		"@codemirror/autocomplete",
		"@codemirror/collab",
		"@codemirror/commands",
		"@codemirror/language",
		"@codemirror/lint",
		"@codemirror/search",
		"@codemirror/state",
		"@codemirror/view",
		"@lezer/common",
		"@lezer/highlight",
		"@lezer/lr",
	],
	format: "cjs",
	target: "esnext",
	logLevel: "info",
	sourcemap: prod ? false : "inline",
	treeShaking: true,
	outfile: "main.js",
	minify: prod,
	metafile: true,
}

if (prod) {
	let result = await esbuild.build(commonOptions)
	fs.renameSync('main.css', 'styles.css')

	fs.mkdirSync('out', { recursive: true })
	fs.writeFileSync('out/meta.json', JSON.stringify(result.metafile))
	process.exit(0)
} else {
	const ctx = await esbuild.context(commonOptions)
	await ctx.watch()
}
